#!/bin/bash

# Check if the .docker.env (and optionally .docker.override.env).
# and run docker-compose commands.
_docker_project() {
    if [ -e web/.docker.env ]; then

        if [ -e web/.docker.override.env ]; then
            paste -s -d '\n' web/.docker.env web/.docker.override.env > ./.env
        else
            cp web/.docker.env ./.env
        fi

    else
        echo -e "\e[31mYour project must provide \".docker.env\" file in order to work with dockerizer. Please see https://frontid.github.io/dockerizer/dockerenv/\e[0m"
        exit 1
    fi


    docker-compose -f $PWD/docker-compose.yml -f $PWD/docker-compose.override.yml $1
}

# run docker-compose commands on traefik service.
_traefik_service() {
    docker-compose -f /usr/local/bin/dk_traefik/docker-compose.yml $1
}


# -----------------------------------------------


# Start project?
if [ ! -z "$1" ] && [ $1 = "start" ] && [ -z "$2" ] ; then
    _docker_project "up -d"
fi

# Stop project?
if [ ! -z "$1" ] && [ $1 = "stop" ] && [ -z "$2" ]; then
    _docker_project "stop"
fi

# Restart project?
if [ ! -z "$1" ] && [ $1 = "restart" ] && [ -z "$2" ]; then
    # We dont use just "restart" because this: If you make changes to your docker-compose.yml
    # configuration these changes are not reflected after running this command.
    _docker_project "stop"
    _docker_project "up -d"
fi

# Start traefik?
if [ ! -z "$1" ] && [ $1 = "start" ] && [ ! -z "$2" ] && [ $2 = "traefik" ]; then
    _traefik_service "up -d"
fi

# Stop traefik?
if [ ! -z "$1" ] && [ $1 = "stop" ] && [ ! -z "$2" ] && [ $2 = "traefik" ]; then
    _traefik_service "stop"
fi

# Add new dockerizer
if [ ! -z "$1" ] && [ $1 = "new" ] && [ ! -z "$2" ]; then
    git clone https://github.com/frontid/dockerizer.git $2
    cd $2
    sudo ./setup.sh
fi