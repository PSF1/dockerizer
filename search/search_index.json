{
    "docs": [
        {
            "location": "/", 
            "text": "Dockerizer\n\n\nDockerizer is a docker development tool that allows you to run dockerized LAMP projects. \n\n\nFeatures\n\n\n\n\nA centralized proxy. It allows you to run many different projects all under the common \n80\n and \n443\n ports instead assigning a por for each project.\n\n\nOut of the box you have \nhttps\n enabled.\n\n\nConfigure once and spread to the other collaborators. Commit \n.docker.env\n into your project with the required options and your colleagues will just run the same environment with just one command. \n\n\nForget about the fact that you are working with dockerized projects when run commands. Do you want use \ngulp\n or \ndrush\n from your host machine but execute on the containers? No problem. Dockerizer has the ability to run commands seamlessly. Just run \ngulp build\n and that's it.", 
            "title": "Home"
        }, 
        {
            "location": "/#dockerizer", 
            "text": "Dockerizer is a docker development tool that allows you to run dockerized LAMP projects.", 
            "title": "Dockerizer"
        }, 
        {
            "location": "/#features", 
            "text": "A centralized proxy. It allows you to run many different projects all under the common  80  and  443  ports instead assigning a por for each project.  Out of the box you have  https  enabled.  Configure once and spread to the other collaborators. Commit  .docker.env  into your project with the required options and your colleagues will just run the same environment with just one command.   Forget about the fact that you are working with dockerized projects when run commands. Do you want use  gulp  or  drush  from your host machine but execute on the containers? No problem. Dockerizer has the ability to run commands seamlessly. Just run  gulp build  and that's it.", 
            "title": "Features"
        }, 
        {
            "location": "/install/", 
            "text": "Installation\n\n\nA brief of what install script will do:\n\n\n\n\nInstall \nsmartcd\n if not installed (will be prompted for configuration. Just leave all options by default).\n\n\nInstalls a traefik service (at \n/usr/local/bin/dk_traefik\n).  \n\n\nInstalls \ndk\n cli.\n\n\n\n\nTo install dockerizer run:\n\n\nbash \n(curl -s https://raw.githubusercontent.com/frontid/dockerizer/master/install.sh)\ndk start traefik\n\n\n\n\nConfigure a new project\n\n\nDockerizer works on a high level of your project and the first step is to clone it on your projects dir:\n\n\ndk new myproject_dockerized\ncd myproject_dockerized\ngit clone git@github.com:YOU/YOUR-PROJECT.git web\n\n\n\n\nNext you need \"dockerize\" a project. To accomplish that the only thing you need to do is  create \n.docker.env\n and commit the preferences on the file.\n\nDockerizer provides you an example. Copy \nexample.docker.env\n as \n.docker.env\n at your \"web\" dir and configure it (See \n.docker.env\n documentation for a more detailed explanation). \n\n\nThat's all, now run \ndk start\n and happy coding!\n\n\nRun a configured project\n\n\nIf your project already has \n.docker.env\n pushed on your project follow these steps.\n\n\ndk new myproject_dockerized\ncd myproject_dockerized\ngit clone git@github.com:YOU/YOUR-PROJECT.git web\ndk start", 
            "title": "Install"
        }, 
        {
            "location": "/install/#installation", 
            "text": "A brief of what install script will do:   Install  smartcd  if not installed (will be prompted for configuration. Just leave all options by default).  Installs a traefik service (at  /usr/local/bin/dk_traefik ).    Installs  dk  cli.   To install dockerizer run:  bash  (curl -s https://raw.githubusercontent.com/frontid/dockerizer/master/install.sh)\ndk start traefik", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#configure-a-new-project", 
            "text": "Dockerizer works on a high level of your project and the first step is to clone it on your projects dir:  dk new myproject_dockerized\ncd myproject_dockerized\ngit clone git@github.com:YOU/YOUR-PROJECT.git web  Next you need \"dockerize\" a project. To accomplish that the only thing you need to do is  create  .docker.env  and commit the preferences on the file. \nDockerizer provides you an example. Copy  example.docker.env  as  .docker.env  at your \"web\" dir and configure it (See  .docker.env  documentation for a more detailed explanation).   That's all, now run  dk start  and happy coding!", 
            "title": "Configure a new project"
        }, 
        {
            "location": "/install/#run-a-configured-project", 
            "text": "If your project already has  .docker.env  pushed on your project follow these steps.  dk new myproject_dockerized\ncd myproject_dockerized\ngit clone git@github.com:YOU/YOUR-PROJECT.git web\ndk start", 
            "title": "Run a configured project"
        }, 
        {
            "location": "/domains/", 
            "text": "Globally available domains\n\n\nlocalhost:8080\n shows you all registered domains for all running projects under dockerizer.\n\n\nAvailable domains by project\n\n\nEach project will have the following domains (if you configured PROJECT_NAME as \"foo\"):\n\n- \nfoo.localhost\n -\n Website\n\n- \nfoo.pma.localhost\n -\n PhpMyAdmin\n\n- \nfoo.mailhog.localhost\n-\n MailHog client.", 
            "title": "Domains"
        }, 
        {
            "location": "/domains/#globally-available-domains", 
            "text": "localhost:8080  shows you all registered domains for all running projects under dockerizer.", 
            "title": "Globally available domains"
        }, 
        {
            "location": "/domains/#available-domains-by-project", 
            "text": "Each project will have the following domains (if you configured PROJECT_NAME as \"foo\"): \n-  foo.localhost  -  Website \n-  foo.pma.localhost  -  PhpMyAdmin \n-  foo.mailhog.localhost -  MailHog client.", 
            "title": "Available domains by project"
        }, 
        {
            "location": "/dk/", 
            "text": "\"dk\" the dockerizer cli\n\n\nDockerizer uses a very simple tool to manage the projects. \n\n\ndk new\n\n\nThis command will prepare a dockerizer dir for you. For example if you run \ndk new foo\n it will create \nfoo\n dir with the dockerizer structure ready to use. So the only thing you need to do is create web dir as mentioned at \nConfigure a new project\n on the Install section. \n\n\ndk on projects\n\n\nWhen you have a configured \"dockerized\" project you will want to start, stop, and restart it right?\n\nWell. Just go to the project and run \ndk start|stop|restart\n.\n\n\ndk on proxy\n\n\nAnd what if you want to stop the proxy to release the 80 and 443 ports?\n\nWell, run \ndk stop|start traefik\n :) (no matter the current path you are on).\n\n\ndk self-update\n\n\nIf there is a new version of the dk tool you can easily upgrade it with this command.", 
            "title": "dk the dockerizer cli"
        }, 
        {
            "location": "/dk/#dk-the-dockerizer-cli", 
            "text": "Dockerizer uses a very simple tool to manage the projects.", 
            "title": "\"dk\" the dockerizer cli"
        }, 
        {
            "location": "/dk/#dk-new", 
            "text": "This command will prepare a dockerizer dir for you. For example if you run  dk new foo  it will create  foo  dir with the dockerizer structure ready to use. So the only thing you need to do is create web dir as mentioned at  Configure a new project  on the Install section.", 
            "title": "dk new"
        }, 
        {
            "location": "/dk/#dk-on-projects", 
            "text": "When you have a configured \"dockerized\" project you will want to start, stop, and restart it right? \nWell. Just go to the project and run  dk start|stop|restart .", 
            "title": "dk on projects"
        }, 
        {
            "location": "/dk/#dk-on-proxy", 
            "text": "And what if you want to stop the proxy to release the 80 and 443 ports? \nWell, run  dk stop|start traefik  :) (no matter the current path you are on).", 
            "title": "dk on proxy"
        }, 
        {
            "location": "/dk/#dk-self-update", 
            "text": "If there is a new version of the dk tool you can easily upgrade it with this command.", 
            "title": "dk self-update"
        }, 
        {
            "location": "/dockerenv/", 
            "text": ".docker.env file\n\n\nThis is the shared docker configuration file. On it you can configure things like PHP version, MySQL version, PHP, settings an all you need to fit the project into the docker.\n\n\n\n\n\n\n\n\nVAR\n\n\nMEANING\n\n\n\n\n\n\n\n\n\n\n\n\nPROJECT_NAME\n\n\nThe project base name\n\n\nNeeds to be customized\n\n\n\n\n\n\nPROJECT_BASE_URL\n\n\nThe project url\n\n\nNeeds to be customized\n\n\n\n\n\n\nDOCKER_PROJECT_HOST\n\n\nIP of the docker host\n\n\nIn order to xdebug you need the right docker host ip. Normally is 172.17.0.1 or 172.17.0.2\n\n\n\n\n\n\nPROJECT_BASE_PATH\n\n\nBase project's path\n\n\nIf your project resides in a subdir you can specify it on PROJECT_BASE_PATH\n\n\n\n\n\n\nPHP_MAX_EXECUTION_TIME\n\n\nPHP max execution time\n\n\n\n\n\n\n\n\nPHP_POST_MAX_SIZE\n\n\nPHP max $_POST size\n\n\n\n\n\n\n\n\nPHP_UPLOAD_MAX_FILESIZE\n\n\nPHP max $_POST file size\n\n\n\n\n\n\n\n\nPHP_MEMORY_LIMIT\n\n\nPHP apache memory limit (cli is unlimited)\n\n\n\n\n\n\n\n\nPHP_TAG\n\n\nSets the php container/version to be used.\n\n\nFor \nlinux and mac there are two group of possible values\n. \n\"7.1-dev-4.8.0\"\n format for linux and \n\"7.2-dev-macos-4.8.0\"\n for mac.\n\n\n\n\n\n\n\n\nFor the rest of available variables please see  \nhttps://github.com/wodby/docker4drupal\n\n\nSince \n.docker.env\n is a common shared file you will not be able to make personal modifications on it like your docker IP since it would be different of your colleague's IP [\nDOCKER_PROJECT_HOST\n]. For this king of customizations you have \n.docker.override.env\n  \n\n\n.docker.override.env\n should be never committed since it is only for you and your environment. The usage is really simple. Just put in there the variables you want to override with the new value like in the original \n.docker.env\n file.", 
            "title": "The .docker.env file"
        }, 
        {
            "location": "/dockerenv/#dockerenv-file", 
            "text": "This is the shared docker configuration file. On it you can configure things like PHP version, MySQL version, PHP, settings an all you need to fit the project into the docker.     VAR  MEANING       PROJECT_NAME  The project base name  Needs to be customized    PROJECT_BASE_URL  The project url  Needs to be customized    DOCKER_PROJECT_HOST  IP of the docker host  In order to xdebug you need the right docker host ip. Normally is 172.17.0.1 or 172.17.0.2    PROJECT_BASE_PATH  Base project's path  If your project resides in a subdir you can specify it on PROJECT_BASE_PATH    PHP_MAX_EXECUTION_TIME  PHP max execution time     PHP_POST_MAX_SIZE  PHP max $_POST size     PHP_UPLOAD_MAX_FILESIZE  PHP max $_POST file size     PHP_MEMORY_LIMIT  PHP apache memory limit (cli is unlimited)     PHP_TAG  Sets the php container/version to be used.  For  linux and mac there are two group of possible values .  \"7.1-dev-4.8.0\"  format for linux and  \"7.2-dev-macos-4.8.0\"  for mac.     For the rest of available variables please see   https://github.com/wodby/docker4drupal  Since  .docker.env  is a common shared file you will not be able to make personal modifications on it like your docker IP since it would be different of your colleague's IP [ DOCKER_PROJECT_HOST ]. For this king of customizations you have  .docker.override.env     .docker.override.env  should be never committed since it is only for you and your environment. The usage is really simple. Just put in there the variables you want to override with the new value like in the original  .docker.env  file.", 
            "title": ".docker.env file"
        }, 
        {
            "location": "/commands/", 
            "text": "Thanks to smartcd (installed when you ran install.sh) you can run common command inside the containers in a transparent way. It is possible because there is a \"bin\" dir with scripts with the same name of the real ones. These scripts just redirect the command into the right container.\n\n\nCurrently there're the following common commands:\n\n\nbower\n\n\nAccepts all common software params. \n\n\n\n\nbundle\n\n\nAccepts all common software params.\n\n\n\n\ncompass\n\n\nAccepts all common software params.\n\n\n\n\ncomposer\n\n\nAccepts all common software params.\n\n\n\n\ndrush\n\n\nAccepts all common software params.\n\n\n\n\ndrupal (drupal console)\n\n\nAccepts all common software params.\n\n\n\n\ngem\n\n\nAccepts all common software params.\n\n\n\n\ngrunt\n\n\nAccepts all common software params.\n\n\n\n\ngulp\n\n\nAccepts all common software params.\n\n\n\n\nnode\n\n\nAccepts all common software params.\n\n\n\n\nnpm\n\n\nAccepts all common software params.\n\n\n\n\nyarn\n\n\nAccepts all common software params.\n\n\n\n\nlogs\n\n\nlogs\n shows the logs of all containers or of a specific one. This command can be run anywhere inside the dockerized dir and project.\n\n\nThe available options are:\n\n\n-f\n Follow log output.\n\n\nUsage\n\nShow logs of all containers: \nlogs\n\nShow logs of an specific container: \nlogs apache\n, \nlogs php\n, \nlogs masriadb\n\nShow logs of an specific container with the follow option set: \nlogs -f apache\n\n\n\n\ncmd\n\n\ncmd\n allows you to run arbitrary commands like \nls\n, \ntail\n inside the \ncontainer\n. Use this command when there is no an alias (see \"common commands\").  \n\n\nUsage\n\n\ncmd php ls -l\n where \"php\" is the container and \"ls -l\" is the sent command.\n\n\n\n\nexpose\n\n\nexpose\n (Drops a container shell).\n\nBy default connects to the php container if you do not specify any other. But if you want to connect to another container like the DB one just type \nexpose mariadb\n.\n\nIf you want to enter as \nroot\n just add \n--root\n: \nexpose apache --root\n.\n\n\nAvailable containers are:\n \n\n\n\n\nphp (by default)\n\n\nmariadb (mysql)\n\n\napache\n\n\nfrontend\n\n\n\n\nUsage\n\n\nexpose\n drops a shell of php (default)\n\n\nexpose apache\n drops a shell of apache\n\n\nexpose apache --root\n drops a root shell of apache\n\n\n\n\nAdding new command\n\n\nTo create a new \"command\" like \"drush\" does just create a new empty file at ./bin dir and fill with this code:\n\n\n#!/bin/bash\nsource _command_wrapper '[CONTAINER NAME]' 'exec' '[COMMAND]' $@\n\n\n\n\nCONTAINER NAME: The container where the command resides.\nCOMMAND: the command to be run. \n\n\nAnd that's all. Now you will be able to run the command locally as any other command and it will be pushed into the right container and run into it.", 
            "title": "Available commands"
        }, 
        {
            "location": "/commands/#bower", 
            "text": "Accepts all common software params.", 
            "title": "bower"
        }, 
        {
            "location": "/commands/#bundle", 
            "text": "Accepts all common software params.", 
            "title": "bundle"
        }, 
        {
            "location": "/commands/#compass", 
            "text": "Accepts all common software params.", 
            "title": "compass"
        }, 
        {
            "location": "/commands/#composer", 
            "text": "Accepts all common software params.", 
            "title": "composer"
        }, 
        {
            "location": "/commands/#drush", 
            "text": "Accepts all common software params.", 
            "title": "drush"
        }, 
        {
            "location": "/commands/#drupal-drupal-console", 
            "text": "Accepts all common software params.", 
            "title": "drupal (drupal console)"
        }, 
        {
            "location": "/commands/#gem", 
            "text": "Accepts all common software params.", 
            "title": "gem"
        }, 
        {
            "location": "/commands/#grunt", 
            "text": "Accepts all common software params.", 
            "title": "grunt"
        }, 
        {
            "location": "/commands/#gulp", 
            "text": "Accepts all common software params.", 
            "title": "gulp"
        }, 
        {
            "location": "/commands/#node", 
            "text": "Accepts all common software params.", 
            "title": "node"
        }, 
        {
            "location": "/commands/#npm", 
            "text": "Accepts all common software params.", 
            "title": "npm"
        }, 
        {
            "location": "/commands/#yarn", 
            "text": "Accepts all common software params.", 
            "title": "yarn"
        }, 
        {
            "location": "/commands/#logs", 
            "text": "logs  shows the logs of all containers or of a specific one. This command can be run anywhere inside the dockerized dir and project.  The available options are:  -f  Follow log output.  Usage \nShow logs of all containers:  logs \nShow logs of an specific container:  logs apache ,  logs php ,  logs masriadb \nShow logs of an specific container with the follow option set:  logs -f apache", 
            "title": "logs"
        }, 
        {
            "location": "/commands/#cmd", 
            "text": "cmd  allows you to run arbitrary commands like  ls ,  tail  inside the  container . Use this command when there is no an alias (see \"common commands\").    Usage  cmd php ls -l  where \"php\" is the container and \"ls -l\" is the sent command.", 
            "title": "cmd"
        }, 
        {
            "location": "/commands/#expose", 
            "text": "expose  (Drops a container shell). \nBy default connects to the php container if you do not specify any other. But if you want to connect to another container like the DB one just type  expose mariadb . \nIf you want to enter as  root  just add  --root :  expose apache --root .  Available containers are:     php (by default)  mariadb (mysql)  apache  frontend   Usage  expose  drops a shell of php (default)  expose apache  drops a shell of apache  expose apache --root  drops a root shell of apache", 
            "title": "expose"
        }, 
        {
            "location": "/commands/#adding-new-command", 
            "text": "To create a new \"command\" like \"drush\" does just create a new empty file at ./bin dir and fill with this code:  #!/bin/bash\nsource _command_wrapper '[CONTAINER NAME]' 'exec' '[COMMAND]' $@  CONTAINER NAME: The container where the command resides.\nCOMMAND: the command to be run.   And that's all. Now you will be able to run the command locally as any other command and it will be pushed into the right container and run into it.", 
            "title": "Adding new command"
        }, 
        {
            "location": "/requirements/", 
            "text": "All\n\n\n\n\nDocker 18.03+\n\n\ndocker-compose\n\n\ngit\n\n\nBrew  (\nHomebrew\n) only for mac.\n\n\n\n\nMac\n\n\nFor mac you need \nunison\n, \nbash\n and \ndocker-sync\n.  \n\n\ngem install docker-sync\nbrew install unison\nbrew install bash", 
            "title": "Requirements"
        }, 
        {
            "location": "/requirements/#all", 
            "text": "Docker 18.03+  docker-compose  git  Brew  ( Homebrew ) only for mac.", 
            "title": "All"
        }, 
        {
            "location": "/requirements/#mac", 
            "text": "For mac you need  unison ,  bash  and  docker-sync .    gem install docker-sync\nbrew install unison\nbrew install bash", 
            "title": "Mac"
        }, 
        {
            "location": "/uninstall/", 
            "text": "If you want to uninstall dockerizer just run this command:\n\n\nbash \n(curl -s https://raw.githubusercontent.com/frontid/dockerizer/master/uninstall.sh)\n\n\n\n\nThe script will remove dk, dk_traefik, smartcd and all related stuff. No current docker images and containers of each projects will be removed.", 
            "title": "Uninstall"
        }, 
        {
            "location": "/troubleshoot/", 
            "text": "I can't connect to the DB as I was doing it on my localhost\n\n\nSince the DB it's a independent container, the right way to connect to it is point to the remote container like this:\n\n\n'database' =\n '[DB_NAME]',\n'username' =\n '[DB_USER]',\n'password' =\n '[DB_PASSWORD]',\n'host' =\n '[PROJECTNAME]_[DB_HOST]',\n\n\n\n\nBasically we are using the configured db params at \n.docker.env\n. For example if we have a .docker.env configured like this: \n\n\n...\n\nPROJECTNAME=foo\n\nDB_NAME=db\nDB_USER=db\nDB_PASSWORD=db\nDB_ROOT_PASSWORD=root\nDB_HOST=mariadb\nDB_DRIVER=mysql\n\n....\n\n\n\n\nWe should connect from our web project using this config:\n\n\n'database' =\n 'db',\n'username' =\n 'db',\n'password' =\n 'db',\n'host' =\n 'foo_mariadb',\n\n\n\n\nChrome shows me \"Your connection is not private\" when I try to enter to the https dockerized page.\n\n\nSince dockerizer provides a self signed certificate to allow https localhost development, iy's common to see a warning link this:\n\n\n\n\nThe solution at chrome is to open a new tab and paste this command: \nchrome://flags/#allow-insecure-localhost\n mark the option to \"enabled\" and restart the browser:\n\n\n \n\n\nNow chrome will show the page without prompting you with \"Your connection is not private\" anymore.", 
            "title": "Troubleshoot"
        }, 
        {
            "location": "/troubleshoot/#i-cant-connect-to-the-db-as-i-was-doing-it-on-my-localhost", 
            "text": "Since the DB it's a independent container, the right way to connect to it is point to the remote container like this:  'database' =  '[DB_NAME]',\n'username' =  '[DB_USER]',\n'password' =  '[DB_PASSWORD]',\n'host' =  '[PROJECTNAME]_[DB_HOST]',  Basically we are using the configured db params at  .docker.env . For example if we have a .docker.env configured like this:   ...\n\nPROJECTNAME=foo\n\nDB_NAME=db\nDB_USER=db\nDB_PASSWORD=db\nDB_ROOT_PASSWORD=root\nDB_HOST=mariadb\nDB_DRIVER=mysql\n\n....  We should connect from our web project using this config:  'database' =  'db',\n'username' =  'db',\n'password' =  'db',\n'host' =  'foo_mariadb',", 
            "title": "I can't connect to the DB as I was doing it on my localhost"
        }, 
        {
            "location": "/troubleshoot/#chrome-shows-me-your-connection-is-not-private-when-i-try-to-enter-to-the-https-dockerized-page", 
            "text": "Since dockerizer provides a self signed certificate to allow https localhost development, iy's common to see a warning link this:   The solution at chrome is to open a new tab and paste this command:  chrome://flags/#allow-insecure-localhost  mark the option to \"enabled\" and restart the browser:     Now chrome will show the page without prompting you with \"Your connection is not private\" anymore.", 
            "title": "Chrome shows me \"Your connection is not private\" when I try to enter to the https dockerized page."
        }, 
        {
            "location": "/mac/", 
            "text": "Dockerizer is compatible with mac and out of the box will be \nalmost\n ready to use.  \n\n\n\"\nAlmost\n\" means that you will need to do a small override since \nMac has it own PHP container\n. \n\n\nNormally on a new or an existent project you will need a \n.docker.env\n file configured for your project (See \ninstall page\n instructions) and this file will contain the PHP container the project will use and normally will be a linux version.\n\n\nIf all your team is using linux it is ok, but \nif your team uses mainly Mac\n then you can select a mac container as a default PHP container (See \n.docker.env file options\n for more references).\n\n\nOn the other hand, \nIf your team uses linux and you need a mac container for your local development\n, the way to use a mac version only at your localhost is via \n.docker.override.env\n (See \n.docker.env file options\n for more references).", 
            "title": "Mac"
        }
    ]
}